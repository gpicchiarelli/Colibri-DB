name: Tooling & Dependencies

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  workflow_dispatch:
    inputs:
      tool_type:
        description: 'Tool to update'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - swift
          - dependencies
          - security

permissions:
  contents: read
  security-events: write
  actions: write

env:
  SWIFT_VERSION: '6.0'

jobs:
  # ============================================================================
  # Dependency Updates
  # ============================================================================
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event.inputs.tool_type == 'all' || github.event.inputs.tool_type == 'dependencies' || github.event_name == 'schedule'
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
          disable-sudo: true
      
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: ${{ env.SWIFT_VERSION }}
      
      - name: Update Swift Dependencies
        run: |
          swift package update
          
          # Check if Package.resolved changed
          if git diff --quiet Package.resolved; then
            echo "No dependency updates available"
          else
            echo "Dependencies updated, creating PR..."
            
            # Configure git
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            
            # Create branch and commit
            BRANCH_NAME="deps/update-$(date +%Y%m%d)"
            git checkout -b "$BRANCH_NAME"
            git add Package.resolved
            git commit -m "chore: update Swift dependencies
            
            - Updated dependencies to latest versions
            - Generated by GitHub Actions"
            
            # Push branch
            git push origin "$BRANCH_NAME"
            
            # Create PR
            gh pr create \
              --title "chore: update Swift dependencies" \
              --body "Automated dependency update for $(date +%Y-%m-%d)
              
              This PR updates Swift package dependencies to their latest versions.
              
              **Changes:**
              - Updated Package.resolved with latest dependency versions
              
              **Review:**
              - [ ] All tests pass
              - [ ] No breaking changes
              - [ ] Performance impact assessed" \
              --label "dependencies,automated" \
              --assignee "@me"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # Security Scanning
  # ============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.tool_type == 'all' || github.event.inputs.tool_type == 'security' || github.event_name == 'schedule'
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
      
      - name: Checkout Code
        uses: actions/checkout@v5
      
      - name: Run Trivy Security Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Check for Vulnerabilities
        run: |
          if [ -f "trivy-results.sarif" ]; then
            # Parse SARIF for high/critical vulnerabilities
            HIGH_CRITICAL=$(jq '.runs[0].results[] | select(.level == "error" or .level == "warning") | .level' trivy-results.sarif | wc -l)
            
            if [ "$HIGH_CRITICAL" -gt 0 ]; then
              echo "❌ Found $HIGH_CRITICAL high/critical security issues"
              echo "::error::Security scan found $HIGH_CRITICAL high/critical vulnerabilities"
              exit 1
            else
              echo "✅ No high/critical security issues found"
            fi
          else
            echo "⚠️ No security scan results found"
          fi

  # ============================================================================
  # Swift Toolchain Updates
  # ============================================================================
  swift-update:
    name: Check Swift Updates
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.tool_type == 'all' || github.event.inputs.tool_type == 'swift' || github.event_name == 'schedule'
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
      
      - name: Checkout Code
        uses: actions/checkout@v5
      
      - name: Check Swift Version
        run: |
          echo "Current Swift version: ${{ env.SWIFT_VERSION }}"
          
          # Check for newer Swift versions
          LATEST_SWIFT=$(curl -s https://api.github.com/repos/apple/swift/releases/latest | jq -r '.tag_name')
          echo "Latest Swift version: $LATEST_SWIFT"
          
          if [ "$LATEST_SWIFT" != "swift-${{ env.SWIFT_VERSION }}" ]; then
            echo "⚠️ Newer Swift version available: $LATEST_SWIFT"
            echo "Consider updating SWIFT_VERSION in workflows"
          else
            echo "✅ Using latest Swift version"
          fi

  # ============================================================================
  # Workflow Health Check
  # ============================================================================
  workflow-health:
    name: Workflow Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.inputs.tool_type == 'all' || github.event_name == 'schedule'
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
      
      - name: Checkout Code
        uses: actions/checkout@v5
      
      - name: Validate Workflows
        run: |
          echo "🔍 Validating GitHub Actions workflows..."
          
          # Check for common issues
          ISSUES=0
          
          # Check for deprecated actions
          if grep -r "actions/create-release@v1" .github/workflows/; then
            echo "❌ Found deprecated actions/create-release@v1"
            ISSUES=$((ISSUES + 1))
          fi
          
          if grep -r "actions/upload-release-asset@v1" .github/workflows/; then
            echo "❌ Found deprecated actions/upload-release-asset@v1"
            ISSUES=$((ISSUES + 1))
          fi
          
          # Check for hardcoded versions
          if grep -r "uses: actions/checkout@v[1-3]" .github/workflows/; then
            echo "⚠️ Found outdated actions/checkout versions"
            ISSUES=$((ISSUES + 1))
          fi
          
          # Check for missing permissions
          for workflow in .github/workflows/*.yml; do
            if ! grep -q "permissions:" "$workflow"; then
              echo "⚠️ Missing permissions in $workflow"
              ISSUES=$((ISSUES + 1))
            fi
          done
          
          if [ $ISSUES -eq 0 ]; then
            echo "✅ All workflows look healthy"
          else
            echo "❌ Found $ISSUES workflow issues"
            exit 1
          fi
      
      - name: Check Workflow Syntax
        run: |
          echo "🔍 Checking workflow syntax..."
          
          for workflow in .github/workflows/*.yml; do
            echo "Checking $workflow..."
            if ! python3 -c "import yaml; yaml.safe_load(open('$workflow'))" 2>/dev/null; then
              echo "❌ Syntax error in $workflow"
              exit 1
            fi
          done
          
          echo "✅ All workflows have valid syntax"

  # ============================================================================
  # Summary
  # ============================================================================
  tooling-summary:
    name: Tooling Summary
    runs-on: ubuntu-latest
    needs:
      - update-dependencies
      - security-scan
      - swift-update
      - workflow-health
    if: always()
    
    steps:
      - name: Create Summary
        run: |
          echo "# Tooling & Dependencies Summary - $(date -u +"%Y-%m-%d")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.update-dependencies.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Swift Update | ${{ needs.swift-update.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Workflow Health | ${{ needs.workflow-health.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.update-dependencies.result }}" == "success" ]] && \
             [[ "${{ needs.security-scan.result }}" == "success" ]] && \
             [[ "${{ needs.swift-update.result }}" == "success" ]] && \
             [[ "${{ needs.workflow-health.result }}" == "success" ]]; then
            echo "✅ All tooling checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Some tooling checks failed. Review individual jobs for details." >> $GITHUB_STEP_SUMMARY
          fi