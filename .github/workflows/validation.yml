name: Automated Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      validation_type:
        description: 'Type of validation to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - code-quality
          - performance
          - documentation
          - compatibility

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  SWIFT_VERSION: '6.0'

jobs:
  # ============================================================================
  # Code Quality Validation
  # ============================================================================
  code-quality:
    name: Code Quality Validation
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    if: github.event.inputs.validation_type == 'all' || github.event.inputs.validation_type == 'code-quality' || github.event_name == 'pull_request'
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
          disable-sudo: true
      
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Setup Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: ${{ env.SWIFT_VERSION }}
      
      - name: Cache Swift PM
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-validation-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-validation-
      
      - name: Install SwiftLint
        run: |
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            brew install swiftlint
          else
            # Install SwiftLint on Linux
            curl -sL https://github.com/realm/SwiftLint/releases/latest/download/portable_swiftlint.zip | bsdtar -xzf - -C /usr/local/bin
            chmod +x /usr/local/bin/swiftlint
          fi
      
      - name: Run SwiftLint
        run: |
          swiftlint lint --config Configuration/swiftlint.yml --reporter github-actions-logging
      
      - name: Install SwiftFormat
        run: |
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            brew install swiftformat
          else
            # Install SwiftFormat on Linux
            curl -sL https://github.com/nicklockwood/SwiftFormat/releases/latest/download/swiftformat_linux.zip | bsdtar -xzf - -C /usr/local/bin
            chmod +x /usr/local/bin/swiftformat
          fi
      
      - name: Check SwiftFormat
        run: |
          swiftformat --config Configuration/swiftformat.yml --lint . --swiftversion 6.0
      
      - name: Build and Test
        run: |
          swift build --configuration debug
          swift test --parallel
      
      - name: Generate Code Quality Report
        run: |
          echo "# Code Quality Report" > quality-report.md
          echo "" >> quality-report.md
          echo "## SwiftLint Results" >> quality-report.md
          echo "\`\`\`" >> quality-report.md
          swiftlint lint --config Configuration/swiftlint.yml >> quality-report.md 2>&1 || true
          echo "\`\`\`" >> quality-report.md
          echo "" >> quality-report.md
          echo "## SwiftFormat Results" >> quality-report.md
          echo "\`\`\`" >> quality-report.md
          swiftformat --config Configuration/swiftformat.yml --lint . --swiftversion 6.0 >> quality-report.md 2>&1 || true
          echo "\`\`\`" >> quality-report.md
      
      - name: Upload Quality Report
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-report
          path: quality-report.md
          retention-days: 7

  # ============================================================================
  # Performance Validation
  # ============================================================================
  performance:
    name: Performance Validation
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    if: github.event.inputs.validation_type == 'all' || github.event.inputs.validation_type == 'performance' || github.event_name == 'pull_request'
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
          disable-sudo: true
      
      - name: Checkout Code
        uses: actions/checkout@v5
      
      - name: Setup Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: ${{ env.SWIFT_VERSION }}
      
      - name: Cache Swift PM
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-perf-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-perf-
      
      - name: Build Benchmarks
        run: |
          swift build --configuration release --product benchmarks
      
      - name: Run Performance Benchmarks
        run: |
          echo "Running performance benchmarks..."
          if [[ -f ".build/release/benchmarks" ]]; then
            .build/release/benchmarks --quick > benchmark-results.txt
            
            # Convert to JSON
            chmod +x tools/scripts/bench_json.sh
            bash tools/scripts/bench_json.sh benchmark-results.txt benchmark-results.json
          else
            echo "‚ö†Ô∏è Benchmark executable not found, creating dummy results"
            echo '{"benchmarks": []}' > benchmark-results.json
            echo "Benchmark: dummy" > benchmark-results.txt
          fi
      
      - name: Validate Performance
        run: |
          chmod +x tools/scripts/perf_guard.py
          python3 tools/scripts/perf_guard.py benchmark-results.json rules/perf_baseline.json
      
      - name: Upload Performance Results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            benchmark-results.txt
            benchmark-results.json
          retention-days: 7

  # ============================================================================
  # Documentation Validation
  # ============================================================================
  documentation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.validation_type == 'all' || github.event.inputs.validation_type == 'documentation' || github.event_name == 'pull_request'
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
      
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Get Changed Files
        run: |
          git diff --name-only origin/${{ github.base_ref }}..HEAD > changed_files.txt
          echo "Changed files:"
          cat changed_files.txt
      
      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
      
      - name: Run Documentation Guard
        run: |
          chmod +x tools/scripts/docs_guard.py
          python3 tools/scripts/docs_guard.py changed_files.txt
      
      - name: Check Documentation Links
        run: |
          echo "üîç Checking documentation links..."
          
          # Check for broken internal links
          for file in README.md CONTRIBUTING.md SECURITY.md; do
            if [ -f "$file" ]; then
              echo "Checking $file for broken links..."
              # Simple check for markdown links
              grep -o '\[[^\]]*\]([^)]*)' "$file" | while read -r link; do
                url=$(echo "$link" | sed 's/.*(\([^)]*\)).*/\1/')
                if [[ "$url" =~ ^# ]]; then
                  echo "  Internal anchor: $url"
                elif [[ "$url" =~ ^http ]]; then
                  echo "  External link: $url"
                elif [ ! -f "$url" ]; then
                  echo "  ‚ùå Broken link: $url in $file"
                fi
              done
            fi
          done

  # ============================================================================
  # Compatibility Validation
  # ============================================================================
  compatibility:
    name: Compatibility Validation
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25
    if: github.event.inputs.validation_type == 'all' || github.event.inputs.validation_type == 'compatibility' || github.event_name == 'pull_request'
    
    strategy:
      matrix:
        swift-version: ['5.9', '6.0']
        os: [macos-latest, ubuntu-latest]
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
          disable-sudo: true
      
      - name: Checkout Code
        uses: actions/checkout@v5
      
      - name: Setup Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: ${{ matrix.swift-version }}
      
      - name: Cache Swift PM
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-compat-${{ matrix.swift-version }}-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-compat-${{ matrix.swift-version }}-
      
      - name: Build and Test
        run: |
          swift build --configuration debug
          swift test --parallel
      
      - name: Check API Compatibility
        run: |
          echo "üîç Checking API compatibility for Swift ${{ matrix.swift-version }}..."
          
          # Build and check for warnings
          swift build --configuration debug 2>&1 | tee build.log
          
          if grep -q "warning\|error" build.log; then
            echo "‚ö†Ô∏è Found warnings/errors in Swift ${{ matrix.swift-version }}"
            cat build.log
          else
            echo "‚úÖ No compatibility issues found for Swift ${{ matrix.swift-version }}"
          fi

  # ============================================================================
  # PR Comment with Results
  # ============================================================================
  pr-comment:
    name: PR Comment with Results
    runs-on: ubuntu-latest
    needs:
      - code-quality
      - performance
      - documentation
      - compatibility
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
      
      - name: Download Artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts/
      
      - name: Create PR Comment
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## üîç Automated Validation Results\n\n';
            
            // Code Quality
            if ('${{ needs.code-quality.result }}' === 'success') {
              comment += '‚úÖ **Code Quality**: Passed\n';
            } else {
              comment += '‚ùå **Code Quality**: Failed\n';
            }
            
            // Performance
            if ('${{ needs.performance.result }}' === 'success') {
              comment += '‚úÖ **Performance**: Passed\n';
            } else {
              comment += '‚ùå **Performance**: Failed\n';
            }
            
            // Documentation
            if ('${{ needs.documentation.result }}' === 'success') {
              comment += '‚úÖ **Documentation**: Passed\n';
            } else {
              comment += '‚ùå **Documentation**: Failed\n';
            }
            
            // Compatibility
            if ('${{ needs.compatibility.result }}' === 'success') {
              comment += '‚úÖ **Compatibility**: Passed\n';
            } else {
              comment += '‚ùå **Compatibility**: Failed\n';
            }
            
            comment += '\n---\n';
            comment += 'üìä **Summary**: ';
            
            const totalJobs = 4;
            const successJobs = [
              '${{ needs.code-quality.result }}',
              '${{ needs.performance.result }}',
              '${{ needs.documentation.result }}',
              '${{ needs.compatibility.result }}'
            ].filter(result => result === 'success').length;
            
            if (successJobs === totalJobs) {
              comment += `All ${totalJobs} validation checks passed! üéâ`;
            } else {
              comment += `${successJobs}/${totalJobs} validation checks passed.`;
            }
            
            comment += '\n\n';
            comment += 'Check the individual job logs for detailed information.';
            
            // Add code quality report if available
            if (fs.existsSync('artifacts/code-quality-report/quality-report.md')) {
              const qualityReport = fs.readFileSync('artifacts/code-quality-report/quality-report.md', 'utf8');
              comment += '\n\n<details>\n<summary>üìã Code Quality Report</summary>\n\n';
              comment += '```\n' + qualityReport + '\n```\n';
              comment += '</details>';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });